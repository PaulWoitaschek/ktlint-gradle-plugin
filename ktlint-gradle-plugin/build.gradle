import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapperKt

plugins {
    id("java-gradle-plugin")
    id("com.starter.publishing")
    alias(libs.plugins.gradle.pluginpublish)
    alias(libs.plugins.starter.library.kotlin)
}

description = "Lint and formatting for Kotlin using ktlint with configuration-free setup on JVM and Android projects"

configurations {
    register("testRuntimeDependencies") {
        attributes {
            // KGP publishes multiple variants https://kotlinlang.org/docs/whatsnew17.html#support-for-gradle-plugin-variants
            attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.class, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.class, Category.LIBRARY))
        }
    }
    configureEach {
        def kotlinVersion = KotlinPluginWrapperKt.getKotlinPluginVersion(project)
        resolutionStrategy.eachDependency {
            if (requested.group == "org.jetbrains.kotlin" && requested.name.startsWith("kotlin")) {
                useVersion(kotlinVersion)
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.10"
}

dependencies {
    compileOnly(libs.kotlin.gradle)
    compileOnly(libs.agp.gradle)
    compileOnly(libs.ktlint.rule.engine)
    compileOnly(libs.ktlint.cli.ruleset.core)
    compileOnly(libs.ktlint.cli.reporter)
    compileOnly(libs.ktlint.reporter.baseline)

    testRuntimeOnly(libs.junit.jupiter.engine)

    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.commons.io)
    testImplementation(libs.assertj.core)

    testRuntimeDependencies(libs.kotlin.gradle)
    testRuntimeDependencies(libs.agp.gradle)
}

kotlin {
    explicitApi()
}

tasks.register("generateVersionProperties") {
    def projectVersion = version
    def ktlintVersion = libs.versions.maven.ktlint.get()
    def propertiesFile = new File(sourceSets.main.output.resourcesDir, "ktlint-gradle-plugin.properties")
    inputs.property("projectVersion", projectVersion)
    outputs.file(propertiesFile)

    doLast {
        propertiesFile.write """
            kltint_gradle_plugin_version = $projectVersion
            ktlint_version = $ktlintVersion
            
            """.stripIndent()
    }
}

tasks.named("processResources") {
    dependsOn("generateVersionProperties")
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        apiVersion = "1.4"
        languageVersion = "1.4"
    }
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Required to put the Kotlin plugin on the classpath for the functional test suite
tasks.withType(PluginUnderTestMetadata).configureEach {
    pluginClasspath.from(configurations.testRuntimeDependencies)
}

gradlePlugin {
    plugins {
        create("ktlintPlugin") {
            id = "io.github.usefulness.ktlint-gradle-plugin"
            displayName = "ktlint Gradle plugin"
            description = project.description
            tags.addAll(["kotlin", "ktlint", "lint", "format", "style", "android"])
            implementationClass = "io.github.usefulness.KtlintGradlePlugin"
        }
    }
}
